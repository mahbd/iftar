generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Order {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  phone        String
  location     String
  status       String   @default("PENDING")
  orderedItems OrderedItem[]
  finalPrice   Int
  isPreOrder   Boolean  @default(false)
  deliveryDate DateTime @default(now())
  userId       String?  @db.ObjectId
  user         User?    @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
}

model OrderedItem {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  quantity        Int
  price           Int
  discountedPrice Int

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String? @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  phone         String?
  location      String?
  ipaddress     String?
  isSpammer     Boolean?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role   String? @default("USER")
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
